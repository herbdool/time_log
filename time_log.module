<?php
 /**
 * Time Log
 * Adaptation of Support Timer module
 **/

/**
 * @file time_log.module
 */

/**
 * Implementation of hook_help()
 **/
function time_log_help($path, $arg) {
  switch ($path) {
    case 'admin/help#time_log':
      return '<p>' . t('Time log is a content type with a timer attached. You can create node relationships to other content types, such as tasks. You can also use the time field in views.') . '</p>';
      break;
  }
}

/**
 * Implementation of hook_menu()
 **/
function time_log_menu() {
  $items = array();
  $items['admin/settings/time-log'] = array(
    'title' => 'Time Log',
    'description' => 'Configuration settings for the time log.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('time_log_admin'),
    'access arguments' => array('administer time log'),
  );
  return $items;
}

/**
* Implementation of hook_node_info().
*/
function time_log_node_info() {
  return array(
    'time_log' => array(
      'name' => t('Time Log'),
      'module' => 'time_log',
      'description' => "This is a time log with a time field.",
    )
  );
} 

/**
 * Implementation of hook_perm().
 */
function time_log_perm() {
  return array('view time spent', 'edit time spent', 'track time spent', 'administer time log', 'create time log','edit any time log','edit own time log','delete any time log','delete own time log');
}

/**
 * Implementation of hook_access().
 */
function time_log_access($op, $node, $account) {

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create time log', $account);
  }

  // Users who create a node may edit, assuming they have the
  // necessary permissions.
  if ($op == 'update') {
    if (user_access('edit own time log', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    }
    elseif (user_access('edit any time log', $account)) {
		return TRUE;
	}
  }
  
  // Users with permissions may delete the node
  if ($op == 'delete') {
	  if (user_access('delete own time log',$account) && ($account->uid == $node->uid)) {
		  return TRUE;
	  }
	  elseif (user_access('delete any time log',$account)) {
		  return TRUE;
	  }
  }
}

/**
 * Implementation of hook_form()
 **/
function time_log_form(&$node, $form_state) {

  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5
    );
  }

  if ($type->has_body) {
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  return $form;
}

/**
 * Implementation of hook_admin()
 *
 * Make it possible to disable javascript that displays a warning if a user
 * navigates away from a page without saving changes.
 **/
function time_log_admin() {
  $form = array();

  $form['time_log_unload_warning'] = array(
    '#type' => 'checkbox',
    '#title' => t('Warn user if navigating away from task without saving timer information'),
    '#default_value' => variable_get('time_log_unload_warning', TRUE),
  );
  
  $form['time_log_start'] = array(
	'#type' => 'textfield',
	'#title' => t('Starting Time'),
	'#description' => t('The starting time for the timer. Must be in this form: hh:mm:ss. E.g.: Enter 00:15:00 to add 15 minutes before starting any clock.'),
	'#size' => 10,
	'#maxlength' => 8,
	'#default_value' => variable_get('time_log_start','00:00:00'),
	'#element_validate' => array('time_log_time_element_validator'),
	
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 **/
function time_log_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'time_log_node_form') {
    if (isset($form['nid']) && is_array($form['nid']) &&
     isset($form['nid']['#value'])) {
			$form = array_merge(time_log_display_timer(array('nid' => $form['nid']['#value'])), $form);
    }
    else {
      $reference = array();
      $form = array_merge(time_log_add_timer($form_state, $form), $form);
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 **/
function time_log_nodeapi(&$node, $op, $teaser, $page) {
  if ($node->type == 'time_log') {
    switch ($op) {
      case 'view':
        if (user_access('view time spent')) {
          // Display time spent on ticket.
          $timer = db_fetch_object(db_query('SELECT time FROM {time_log} WHERE nid = %d', $node->nid));
          if (!empty($timer) && $timer->time) {
            
            $weight = content_extra_field_weight($node->type,'timer');
            
            $node->content['timer'] = array(
              '#value' => "<div class='task-timer'><div class='time'>Time: $timer->time</div></div>",
              '#weight' => !empty($weight) ? $weight : 100,
            );
          }
        }
        break;
      case 'load':
        return db_fetch_array(db_query('SELECT time FROM {time_log} WHERE nid = %d', $node->nid));
        break;
      case 'validate':
        if (user_access('track time spent') || user_access('administer time log')) {
		}
      case 'insert':
      case 'update':
        $date = strtotime($node->timer_date);
        db_query("UPDATE {time_log} SET time = '%s' WHERE nid = %d", $node->elapsed, $node->nid);
        if (!db_affected_rows()) {
          db_query("INSERT INTO {time_log} (nid, time) VALUES(%d, '%s')", $node->nid, $node->elapsed);
        }
        break;
      case 'delete':
        db_query('DELETE FROM {time_log} WHERE nid = %d', $node->nid);
        break;
    }
  }
}

/**
 *  Display form for tracking time elapsed.
 **/
function time_log_add_timer(&$form_state, $edit) {
  $form = array();

	  $start = variable_get('time_log_start','00:00:00');
    $start_time = explode(':', $start);
    $start_hours = ltrim($start_time[0],'00');
    $start_mins = ltrim($start_time[1],'00');
    $start_secs = ltrim($start_time[2],'00');

  if (user_access('track time spent') || user_access('administer time log')) {
    if (isset($form_state['values']['elapsed'])) {
      $elapsed = $form_state['values']['elapsed'];
    }
    else if (isset($form_state['post']['elapsed'])) {
      $elapsed = $form_state['post']['elapsed'];
    }
    else {
      $elapsed = $start;
    }   
    
    drupal_add_js(array('time_log' => array('unload_warning' => variable_get('time_log_unload_warning', TRUE), 'elapsed' => $elapsed, 'start_hours' => $start_hours, 'start_mins' => $start_mins, 'start_secs' => $start_secs, 'start' => $start)), 'setting');
    drupal_add_js(drupal_get_path('module', 'time_log'). '/time_log.js');
    $form['timer'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div class="container-inline">',
      '#suffix' => '</div>',
      '#weight' => content_extra_field_weight($node->type,'timer'),
    );
    if (!user_access('edit time spent') && !user_access('administer time log')) {
      $attributes = array('disabled' => 'disabled');
    }
    else {
      $attributes = array();
    }
    $visible = user_access('view time spent');
    $form['timer']['elapsed'] = array(
      '#type' => $visible ? 'textfield' : 'hidden',
      '#title' => t('Time spent'),
      '#description' => t('(hh:mm:ss)'),
      '#size' => '8',
      '#maxlength' => '10',
      '#default_value' => $elapsed,
      '#attributes' => $attributes,
      '#element_validate' => array('time_log_time_element_validator'),
    );
    $form['timer']['pause'] = array(
      '#type' => $visible ? 'submit' : 'hidden',
      '#value' => t('Start'),
      '#prefix' => '&nbsp;&nbsp;',
      '#attributes' => array('onclick' => 'pause_timer(); return false;'),
    );
    $form['timer']['reset'] = array(
      '#type' => $visible ? 'submit' : 'hidden',
      '#value' => t('Reset'),
      '#attributes' => array('onclick' => 'reset_timer(); return false;'),
    );
  }
  return $form;
}

/**
 * Validation of the time element.
 **/
function time_log_time_element_validator($form, &$form_state) {
  $elapsed_pattern_structure = '/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/';
  $elapsed_pattern_limit = '/^[0-9]{2}:[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}$/';
  if(!preg_match($elapsed_pattern_structure,$form['#value'])) {
    form_set_error('text', t('The time must be in this form: hh:mm:ss. E.g. 01:25:00 for 1 hour and 25 minutes.'));
  }
	if(!preg_match($elapsed_pattern_limit,$form['#value'])) {
		form_set_error('text', t('The hours cannot be greater than 99; the minutes cannot be greater than 59 and the seconds cannot be greater than 59.'));
	}
}

/**
 *  Display time form on node edit.
 */
function time_log_display_timer($ids) {
  $form = array();

  $details = db_fetch_object(db_query('SELECT time FROM {time_log} WHERE nid = %d', $ids['nid']));
	$elapsed = $details->time;
	$start = variable_get('time_log_start','00:00:00');
  $start_time = explode(':', $start);
  $start_hours = ltrim($start_time[0],'00');
  $start_mins = ltrim($start_time[1],'00');
  $start_secs = ltrim($start_time[2],'00');

  if (user_access('view time spent') || user_access('edit time spent') ||
      user_access('administer time log')) {

		drupal_add_js(array('time_log' => array('unload_warning' => variable_get('time_log_unload_warning', TRUE), 'elapsed' => $elapsed, 'start_hours' => $start_hours, 'start_mins' => $start_mins, 'start_secs' => $start_secs, 'start' => $start)), 'setting');
    drupal_add_js(drupal_get_path('module', 'time_log'). '/time_log.js');
    $form['timer'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div class="container-inline">',
      '#suffix' => '</div>',
      '#weight' => content_extra_field_weight($node->type,'timer'),
    );
    if (!user_access('edit time spent') && !user_access('administer time log')) {
      $attributes = array('disabled' => 'disabled');
    }
    else {
      $attributes = array();
    }
    
    $visible = user_access('view time spent');
    $form['timer']['elapsed'] = array(
      '#type' => $visible ? 'textfield' : 'hidden',
      '#title' => t('Time spent'),
      '#description' => t('(hh:mm:ss)'),
      '#size' => '8',
      '#maxlength' => '10',
      '#default_value' => $elapsed,
      '#attributes' => $attributes,
      '#element_validate' => array('time_log_time_element_validator'),
    );
    $form['timer']['pause'] = array(
      '#type' => $visible ? 'submit' : 'hidden',
      '#value' => t('Start'),
      '#prefix' => '&nbsp;&nbsp;',
      '#attributes' => array('onclick' => 'pause_timer(); return false;'),
    );
    $form['timer']['reset'] = array(
      '#type' => $visible ? 'submit' : 'hidden',
      '#value' => t('Reset'),
      '#attributes' => array('onclick' => 'reset_timer(); return false;'),
    );
  }
  return $form;
}

/*
 * Implementation of hook_views_api()
 *
 * Expose time element to Views
 */
function time_log_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'time_log'),
  );
}

/**
 * Implementation of hook_content_extra_fields()
 */
function time_log_content_extra_fields($type_name) {
	if ($type_name == 'time_log') {
		$extras['timer'] = array(
		'label' => t('Timer'),
		'description' => t('Timer for time log content type.'),
		'weight' => 100,
		);
		return $extras;
	}	
}

/**
 * Need way to convert back and forth from time
   http://drupal.org/node/131031

//Stick this into the views footer, phptemplate, or make a proper module
$my_view = views_get_current_view();

$total = 0;
foreach($my_view->result as $row) {
  $total = $total + convert_seconds($row->time_log_time);
  $total_timelog = convert_timelog($total);
  $total_hours = round($total/3600,2);
}
print '<table>';
print '<tr><td><strong>';
print 'Total Time</strong></td><td>' . $total_hours . 'h</td><td>'  . $total_timelog . '</td></tr>';
print '</table>';

//convert hh:mm:ss to #seconds
function convert_seconds($timelog) {
  $time = explode(':', $timelog);
  $time = $time[0] * 3600 + $time[1] * 60 + $time[2];
  return $time;
}

//convert seconds to hh:mm:ss
function convert_timelog($seconds) {
  $hh = 00;
  $mm = 00;
  if ($seconds > 3600) { $hh = floor($seconds/3600); }
  if ($seconds > 60) {$mm = floor($seconds/60) - $hh*60; }
  $ss = $seconds - ($hh*3600 + $mm*60);
  $timelog = $hh . ':' . $mm . ':' . $ss;
  return $timelog;
}

**/
